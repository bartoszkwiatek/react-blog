{"version":3,"sources":["PostsList/PostsList.js","PostDetails/PostDetails.js","Loader.js","App.js","serviceWorker.js","index.js"],"names":["PostsList","match","useState","error","setError","isLoaded","setIsLoaded","items","setItems","console","log","url","useEffect","fetch","then","res","json","result","message","map","item","margin","padding","bg","border","borderRadius","key","_id","to","title","shortContent","PostDetails","content","Loader","params","Fragment","createdAt","longContent","App","className","spacing","colorScheme","size","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"mUAKMA,EAAY,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACLC,mBAAS,MADJ,mBACxBC,EADwB,KACjBC,EADiB,OAECF,oBAAS,GAFV,mBAExBG,EAFwB,KAEdC,EAFc,OAGLJ,mBAAS,IAHJ,mBAGxBK,EAHwB,KAGjBC,EAHiB,KAuB/B,OAnBAC,QAAQC,IAAR,oBAAyBT,EAAMU,MAC/BC,qBAAU,WACRC,MAAM,cACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCX,GAAY,GACZE,EAASS,MAKX,SAACd,GACCG,GAAY,GACZF,EAASD,QAGd,IAECA,EACK,uCAAaA,EAAMe,SAChBb,EAIR,4BACGE,EAAMY,KAAI,SAAAC,GAAI,OAEb,kBAAC,IAAD,CACEC,OAAO,IACPC,QAAQ,IACRC,GAAG,WACHC,OAAO,MACPC,aAAa,KACbC,IAAKN,EAAKO,KACV,kBAAC,IAAD,CAAMC,GAAE,UAAK3B,EAAMU,IAAX,iBAAuBS,EAAKO,MAClC,4BACE,4BACGP,EAAKS,OAER,2BACGT,EAAKU,qBAnBb,4CC1BLC,EAAc,SAAC,GAAe,IAAb9B,EAAY,EAAZA,MAAY,EACTC,mBAAS,IADA,mBAI3B8B,GAJ2B,UCApB,SAACrB,GAAS,IAAD,EACIT,mBAAS,MADb,mBACfC,EADe,KACRC,EADQ,OAEUF,oBAAS,GAFnB,mBAEfG,EAFe,KAELC,EAFK,OAGIJ,mBAAS,IAHb,mBAGfK,EAHe,KAGRC,EAHQ,KAuBtB,OAlBAI,qBAAU,WACRC,MAAMF,GACHG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCX,GAAY,GACZE,EAASS,MAKX,SAACd,GACCG,GAAY,GACZF,EAASD,QAGd,IAECA,EACKA,EAAMe,QACHb,EAGHE,EAFA,UDtBO0B,CADP,qBAAiBhC,EAAMiC,OAAOP,OAIvC,OADAlB,QAAQC,IAAIsB,GAEV,kBAAC,IAAMG,SAAP,KACE,kBAAC,IAAD,CACEd,OAAO,IACPC,QAAQ,IACRC,GAAG,WACHC,OAAO,MACPC,aAAa,MACb,4BAAKO,EAAQH,OACb,4BAAKG,EAAQI,WACb,2BAAIJ,EAAQK,aACZ,kBAAC,IAAD,CAAMT,GAAE,KAAR,WEoBOU,MApCf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWC,UAAU,OACnB,kBAAC,IAAD,CAAMX,GAAG,KACP,gCACE,0DAGJ,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAQY,QAAQ,KACd,kBAAC,IAAD,CAAMZ,GAAG,KACP,kBAAC,IAAD,CAAQa,YAAY,OAAOC,KAAK,MAAhC,SAGF,kBAAC,IAAD,CAAMd,GAAG,UACP,kBAAC,IAAD,CAAQa,YAAY,OAAOC,KAAK,MAAhC,eAKR,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,cAAcC,UAAWb,IACrC,kBAAC,IAAD,CAAOc,OAAK,EAACF,KAAK,WAGlB,kBAAC,IAAD,CAAOE,OAAK,EAACF,KAAK,IAAIC,UAAW5C,SCvBzB8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShD,MACvB,2D,YCVNiD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KAEE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAzD,GACLM,QAAQN,MAAMA,EAAMe,c","file":"static/js/main.98bb7a94.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Box, Button, ButtonGroup, Container } from \"@chakra-ui/react\"\r\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\"\r\n\r\n\r\nconst PostsList = ({ match }) => {\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [items, setItems] = useState([]);\r\n  console.log(`match url:${match.url}`)\r\n  useEffect(() => {\r\n    fetch(\"/api/posts\")\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setItems(result);\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [])\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>\r\n  } else if (!isLoaded) {\r\n    return <div>Loading...</div>\r\n  } else {\r\n    return (\r\n      <ul>\r\n        {items.map(item => (\r\n          // <Link to={`/post/${item._id}`} key={item._id}>\r\n          <Box\r\n            margin=\"4\"\r\n            padding=\"2\"\r\n            bg=\"gray.100\"\r\n            border=\"1px\"\r\n            borderRadius=\"md\"\r\n            key={item._id}>\r\n            <Link to={`${match.url}posts/${item._id}`} >\r\n              <li >\r\n                <h2>\r\n                  {item.title}\r\n                </h2>\r\n                <p>\r\n                  {item.shortContent}\r\n                </p>\r\n              </li>\r\n            </Link>\r\n          </Box>\r\n        ))}\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n\r\nexport { PostsList }","import React, { useEffect, useState } from 'react';\r\nimport { Box, Button, ButtonGroup, Container } from \"@chakra-ui/react\"\r\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\"\r\nimport { Loader } from '../Loader';\r\n\r\nconst PostDetails = ({ match }) => {\r\n  const [post, setPost] = useState([]);\r\n\r\n  const url = `/api/posts/${match.params._id}`\r\n  const content = Loader(url)\r\n\r\n  console.log(content)\r\n  return (\r\n    <React.Fragment>\r\n      <Box\r\n        margin=\"4\"\r\n        padding=\"2\"\r\n        bg=\"gray.100\"\r\n        border=\"1px\"\r\n        borderRadius=\"md\">\r\n        <h2>{content.title}</h2>\r\n        <h6>{content.createdAt}</h6>\r\n        <p>{content.longContent}</p>\r\n        <Link to={`/`}>Back</Link>\r\n      </Box>\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport { PostDetails }","import React, { useEffect, useState } from 'react';\r\nimport { Box, Button, ButtonGroup, Container } from \"@chakra-ui/react\"\r\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\"\r\n\r\n\r\nconst Loader = (url) => {\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [items, setItems] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setItems(result);\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [])\r\n\r\n  if (error) {\r\n    return error.message\r\n  } else if (!isLoaded) {\r\n    return \"loading\"\r\n  } else {\r\n    return items\r\n  }\r\n}\r\nexport { Loader }","import React, { useEffect, useState } from 'react';\nimport { Button, ButtonGroup, Container, Flex, HStack } from \"@chakra-ui/react\"\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\"\nimport './App.css';\nimport { PostsList } from './PostsList/PostsList';\nimport { PostDetails } from './PostDetails/PostDetails';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Container className=\"App\">\n        <Link to='/'>\n          <header>\n            <h1>Greatest react blog ever</h1>\n          </header>\n        </Link>\n        <Container>\n          <nav>\n            <HStack spacing=\"4\">\n              <Link to='/'>\n                <Button colorScheme=\"teal\" size=\"lg\">Home</Button>\n              </Link>\n\n              <Link to='/admin'>\n                <Button colorScheme=\"teal\" size=\"lg\">Profile</Button>\n              </Link>\n            </HStack>\n          </nav>\n        </Container>\n        <main>\n          <Switch>\n            <Route path=\"/posts/:_id\" component={PostDetails}></Route>\n            <Route exact path=\"/admin\">\n              {/* <Admin /> */}\n            </Route>\n            <Route exact path=\"/\" component={PostsList}></Route>\n          </Switch>\n        </main>\n      </Container>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}