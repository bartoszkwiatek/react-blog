{"version":3,"sources":["utils/context.js","store/reducers/auth_reducer.js","store/actions/action_types.js","store/reducers/form_reducer.js","Header/Header.js","PostsList/PostsList.js","Home/Home.js","PostDetails/PostDetails.js","Loader.js","Profile/Profile.js","utils/history.js","Routes.js","context_state_config.js","store/actions/actions.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","initialState","is_authinticated","profile","AuthReducer","state","action","type","payload","user_textChange","user_textSubmit","FormReducer","Error","Header","context","useContext","to","spacing","colorScheme","size","authState","onClick","authObj","logout","login","PostsList","match","useState","error","setError","isLoaded","setIsLoaded","items","setItems","useEffect","fetch","then","res","json","result","message","map","item","margin","padding","bg","border","borderRadius","key","_id","url","title","shortContent","Home","props","PostDetails","console","log","content","Loader","params","Fragment","createdAt","style","whiteSpace","longContent","Profile","postTitle","setPostTitle","setLongContent","postData","data","a","method","cache","headers","referrerPolicy","body","JSON","stringify","response","deletePost","refreshPage","window","location","reload","newPost","slice","maxW","centerContent","isRequired","value","onChange","event","target","placeholder","resize","disabled","variant","aria-label","fontSize","icon","Add","mb","align","alert","Edit","Delete","createBrowserHistory","Routes","history","exact","path","component","render","ContextState","useReducer","stateAuthReducer","dispatchAuthReducer","stateFormReducer","dispatchFormReducer","Provider","useContextChangeState","useContextSubmitState","useContextSubmit","preventDefault","persist","handleFormSubmit","useContextChange","handleFormChange","is_authenticated","profileState","handleUserLogin","handleUserLogout","handleUserAddProfile","ACTIONS","handleAddProfile","handleUserRemoveProfile","handleAuth","hash","handleAuthentication","App","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.04a80e51.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context;","import * as ACTION_TYPES from '../actions/action_types'\r\n\r\nconst initialState = {\r\n  is_authinticated: false,\r\n  profile: null\r\n}\r\n\r\nconst AuthReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ACTION_TYPES.LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        is_authinticated: true\r\n      }\r\n\r\n    case ACTION_TYPES.LOGIN_FAILURE:\r\n      return {\r\n        ...state,\r\n        is_authinticated: false\r\n      }\r\n\r\n    case ACTION_TYPES.ADD_PROFILE:\r\n      return {\r\n        ...state,\r\n        profile: action.payload\r\n      }\r\n\r\n    case ACTION_TYPES.REMOVE_PROFILE:\r\n      return {\r\n        ...state,\r\n        profile: null\r\n      }\r\n\r\n    default:\r\n      return state\r\n\r\n  }\r\n}\r\n\r\nexport { initialState, AuthReducer }","const SUCCESS = \"SUCCESS\"\r\nconst FAILURE = \"FAILURE\"\r\nconst LOGIN_SUCCESS = \"LOGIN_SUCCESS\"\r\nconst LOGIN_FAILURE = \"LOGIN_FAILURE\"\r\nconst ADD_PROFILE = \"ADD_PROFILE\"\r\nconst REMOVE_PROFILE = \"REMOVE_PROFILE\"\r\nconst USER_INPUT_CHANGE = \"USER_INPUT_CHANGE\"\r\nconst USER_INPUT_SUBMIT = \"USER_INPUT_SUBMIT\"\r\n\r\nexport {\r\n  SUCCESS, FAILURE, LOGIN_SUCCESS, LOGIN_FAILURE, ADD_PROFILE, REMOVE_PROFILE, USER_INPUT_CHANGE, USER_INPUT_SUBMIT\r\n}","import * as ACTION_TYPES from '../actions/action_types'\r\n\r\nconst initialState = {\r\n  user_textChange: '',\r\n  user_textSubmit: ''\r\n}\r\n\r\nconst FormReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ACTION_TYPES.USER_INPUT_CHANGE:\r\n      return {\r\n        ...state,\r\n        user_textChange: action.payload\r\n      }\r\n\r\n    case ACTION_TYPES.USER_INPUT_SUBMIT:\r\n      return {\r\n        ...state,\r\n        user_textSubmit: action.payload\r\n      }\r\n\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nexport { initialState, FormReducer }","import { Box, Button, Container, HStack } from '@chakra-ui/react';\r\nimport React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Context from '../utils/context';\r\n\r\nconst Header = () => {\r\n  const context = useContext(Context)\r\n\r\n  return (\r\n    <Container>\r\n      <Box>\r\n\r\n        <Link to='/'>\r\n          <header>\r\n            <h1>Greatest react blog ever</h1>\r\n          </header>\r\n        </Link>\r\n      </Box>\r\n      <nav>\r\n        <HStack spacing=\"4\">\r\n          <Link to='/'>\r\n            <Button colorScheme=\"teal\" size=\"lg\">Home</Button>\r\n          </Link>\r\n          <Link to='/profile'>\r\n            <Button colorScheme=\"teal\" size=\"lg\">Profile</Button>\r\n          </Link>\r\n          <Link to='/privateroute'>\r\n            <Button colorScheme=\"teal\" size=\"lg\">Private Route</Button>\r\n          </Link>\r\n          {\r\n            !context.authState\r\n              ? <Button onClick={() => context.authObj.login()}>Login</Button>\r\n              : <Button onClick={() => context.authObj.logout()}>Logout</Button>\r\n          }\r\n        </HStack>\r\n      </nav>\r\n\r\n    </Container>\r\n  )\r\n};\r\n\r\n\r\nexport default Header;","import { Box } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst PostsList = ({ match }) => {\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [items, setItems] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/api/posts\")\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setItems(result);\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [])\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>\r\n  } else if (!isLoaded) {\r\n    return <div>Loading...</div>\r\n  } else {\r\n    return (\r\n      <ul>\r\n        {items.map(item => (\r\n          <Box\r\n            margin=\"4\"\r\n            padding=\"2\"\r\n            bg=\"gray.100\"\r\n            border=\"1px\"\r\n            borderRadius=\"md\"\r\n            key={item._id}>\r\n            <Link to={`${match.url}posts/${item._id}`}>\r\n              <li >\r\n                <h2>\r\n\r\n                  {item.title}\r\n                </h2>\r\n                <p>\r\n                  {item.shortContent}\r\n                </p>\r\n              </li>\r\n            </Link>\r\n          </Box>\r\n        ))}\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PostsList","import React from 'react';\r\nimport PostsList from '../PostsList/PostsList';\r\n\r\nconst Home = (props) => (\r\n  <PostsList match={props.match}></PostsList>\r\n);\r\n\r\nexport default Home;","import { Box } from \"@chakra-ui/react\";\r\nimport React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Loader } from '../Loader';\r\n\r\n\r\nconst PostDetails = ({ match }) => {\r\n  console.log(`${match.url}`)\r\n\r\n  const url = `/api/posts/${match.params._id}`\r\n  const content = Loader(url)\r\n\r\n  console.log(content)\r\n  return (\r\n    <React.Fragment>\r\n      <Box\r\n        margin=\"4\"\r\n        padding=\"2\"\r\n        bg=\"gray.100\"\r\n        border=\"1px\"\r\n        borderRadius=\"md\">\r\n        <h2>{content.title}</h2>\r\n        <h6>{content.createdAt}</h6>\r\n        <p style={{ whiteSpace: \"pre-wrap\" }}>{content.longContent}</p>\r\n        <Link to={`/`}>Back</Link>\r\n      </Box>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default PostDetails","import { useEffect, useState } from 'react';\r\n\r\n\r\nconst Loader = (url) => {\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [items, setItems] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setItems(result);\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [url])\r\n\r\n  if (error) {\r\n    return error.message\r\n  } else if (!isLoaded) {\r\n    return \"loading\"\r\n  } else {\r\n    return items\r\n  }\r\n}\r\nexport { Loader };\r\n","import { AddIcon, DeleteIcon, EditIcon } from '@chakra-ui/icons';\r\nimport { Box, ButtonGroup, Container, Flex, IconButton, Input, Spacer, Text, Textarea } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from 'react';\r\n\r\n\r\nconst Profile = ({ match }) => {\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [items, setItems] = useState([]);\r\n  const [postTitle, setPostTitle] = useState(\"\")\r\n  const [longContent, setLongContent] = useState(\"\")\r\n\r\n  const handleTitleChange = (event) => setPostTitle(event.target.value)\r\n  const handleContentChange = (event) => setLongContent(event.target.value)\r\n  const postData = async (url, data) => {\r\n    const response = await fetch(url, {\r\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        // 'Authorization': `Basic ${this.accessToken}`,\r\n        'Authorization': `Basic YWRtaW5AYWRtaW4uY29tOmFkbWlu`,\r\n      },\r\n      referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n    });\r\n    return response.json(); // parses JSON response into native JavaScript objects\r\n  }\r\n\r\n  const deletePost = async (url) => {\r\n    const response = await fetch(url, {\r\n      method: 'DELETE', // *GET, POST, PUT, DELETE, etc.\r\n      headers: {\r\n        // 'Authorization': `Basic ${this.accessToken}`,\r\n        'Authorization': `Basic YWRtaW5AYWRtaW4uY29tOmFkbWlu`,\r\n      },\r\n      referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n    });\r\n    return response.json(); // parses JSON response into native JavaScript objects\r\n  }\r\n\r\n  function refreshPage() {\r\n    window.location.reload(false);\r\n  }\r\n\r\n  const newPost = {\r\n    title: postTitle,\r\n    shortContent: longContent.slice(0, 120),\r\n    longContent: longContent,\r\n  }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    fetch(\"/api/posts\")\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setItems(result);\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [])\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>\r\n  } else if (!isLoaded) {\r\n    return <div>Loading...</div>\r\n  } else {\r\n    return (\r\n      <React.Fragment>\r\n        <Container maxW=\"xl\" centerContent>\r\n          <Input\r\n            isRequired\r\n            value={postTitle}\r\n            onChange={handleTitleChange}\r\n            placeholder=\"Title of new post\"\r\n            size=\"md\"\r\n          />\r\n          <Textarea\r\n            isRequired\r\n            value={longContent}\r\n            onChange={handleContentChange}\r\n            placeholder=\"Post content\"\r\n            size=\"md\"\r\n            resize=\"vertical\"\r\n          />\r\n          <IconButton\r\n            disabled={!postTitle || !longContent}\r\n            onClick={() => {\r\n              postData(\"/api/posts\", newPost)\r\n              refreshPage()\r\n            }}\r\n            variant=\"outline\"\r\n            colorScheme=\"teal\"\r\n            aria-label=\"save\"\r\n            fontSize=\"20px\"\r\n            icon={< AddIcon />}\r\n          />\r\n        </Container>\r\n        <Container maxW=\"xl\" centerContent>\r\n          <Text mb=\"8px\">{postTitle}</Text>\r\n          <Text mb=\"8px\" style={{ whiteSpace: \"pre-wrap\" }}>{longContent}</Text>\r\n        </Container>\r\n\r\n\r\n        <ul>\r\n          {items.map(item => (\r\n            <Box\r\n              margin=\"1\"\r\n              padding=\"1\"\r\n              border=\"1px\"\r\n              borderRadius=\"sm\"\r\n              key={item._id}\r\n            >\r\n              <Flex\r\n                align=\"center\">\r\n                <Box\r\n                  margin=\"1\"\r\n                  padding=\"1\"\r\n                >\r\n                  <h2>\r\n                    {item.title}\r\n                  </h2>\r\n                  <p>\r\n                    {item.shortContent}\r\n                  </p>\r\n                </Box>\r\n                <Spacer />\r\n                <ButtonGroup\r\n                  variant=\"outline\"\r\n                  fontSize=\"20\"\r\n                  spacing=\"2\"\r\n                >\r\n                  <IconButton\r\n                    onClick={() => {\r\n                      alert('Nothing happened!')\r\n                    }}\r\n                    colorScheme=\"teal\"\r\n                    aria-label=\"delete\"\r\n                    icon={< EditIcon />}\r\n                  />\r\n                  <IconButton\r\n                    onClick={() => {\r\n                      deletePost(`api/posts/${item._id}`)\r\n                      refreshPage()\r\n                    }}\r\n                    colorScheme=\"red\"\r\n                    aria-label=\"delete\"\r\n                    icon={< DeleteIcon />}\r\n                  />\r\n                </ButtonGroup>\r\n              </Flex>\r\n\r\n              {/* </Link> */}\r\n            </Box>\r\n          ))}\r\n        </ul>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Profile;","import { createBrowserHistory } from 'history'\r\n\r\nexport default createBrowserHistory()","import React, { useContext } from 'react';\r\nimport { Redirect, Route, Router, Switch } from 'react-router';\r\n// import HooksContainer1 from './hooks/hook1';\r\nimport Callback from './Callback/Callback';\r\nimport Header from './Header/Header';\r\nimport Home from './Home/Home';\r\nimport PostDetails from './PostDetails/PostDetails';\r\n// import HooksForm from './hooks/hooks_form1';\r\nimport PrivateComponent from './PrivateComponents/PrivateComponent';\r\nimport Profile from './Profile/Profile';\r\nimport Context from './utils/context';\r\nimport history from './utils/history';\r\n\r\n\r\n\r\n\r\n// const PrivateRoute = ({ component: Component, auth }) => (\r\n//   <Route render={props => auth === true\r\n//     ? <Component auth={auth} {...props} />\r\n//     : <Redirect to={{ pathname: '/' }} />\r\n//   }\r\n//   />\r\n// )\r\n\r\n\r\n\r\nconst Routes = () => {\r\n  const context = useContext(Context)\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Router history={history} >\r\n        <Header />\r\n        <br />\r\n        <div>\r\n          <Switch>\r\n            <Route exact path='/' component={Home} />\r\n            <Route path='/posts/:_id' component={PostDetails}></Route>\r\n            <Route path='/profile' component={Profile} />\r\n\r\n            {/* <Route path='/hooksform' component={HooksForm} /> */}\r\n            {/* <Route path='/hookscontainer' component={HooksContainer1} /> */}\r\n            {/* <Route path='/authcheck' component={AuthCheck} /> */}\r\n\r\n            {/* <PrivateRoute path='/privateroute'\r\n              auth={context.authState}\r\n              component={PrivateComponent} />\r\n            <PrivateRoute path=\"/profile\"\r\n              auth={context.authState}\r\n              component={Profile} /> */}\r\n            <Route path='/callback'\r\n              render={(props) => {\r\n                // context.handleAuth(props); return <Callback />\r\n              }} />\r\n\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Routes;","import React, { useReducer } from 'react';\r\nimport Context from './utils/context';\r\nimport * as ACTIONS from './store/actions/actions';\r\n\r\n// import * as Reducer1 from './store/reducers/plain_reducer';\r\nimport * as AuthReducer from './store/reducers/auth_reducer';\r\nimport * as FormReducer from './store/reducers/form_reducer';\r\nimport Routes from './Routes';\r\n\r\n// import Auth from './utils/auth';\r\n\r\n\r\n// const auth = new Auth()\r\n\r\n\r\nconst ContextState = () => {\r\n  // /*\r\n  //     Plain Reducer\r\n  // */\r\n  // const [stateReducer1, dispatchReducer1] = useReducer(Reducer1.Reducer1,\r\n  //                                                      Reducer1.initialState)\r\n\r\n\r\n  // const handleDispatchTrue = () => {\r\n  //   //    dispatchReducer1(type: \"SUCCESS\")\r\n  //   //    dispatchReducer1(ACTIONS.SUCCESS)\r\n  //   dispatchReducer1(ACTIONS.success())\r\n  // }\r\n\r\n  // const handleDispatchFalse = () => {\r\n  //   //     dispatchReducer1(type: \"FAILURE\")\r\n  //   //    dispatchReducer1(ACTIONS.FAILURE)\r\n  //   dispatchReducer1(ACTIONS.failure())\r\n  // }\r\n\r\n  /*\r\n    Auth Reducer\r\n  */\r\n  const [stateAuthReducer, dispatchAuthReducer] = useReducer(AuthReducer.AuthReducer,\r\n    AuthReducer.initialState)\r\n\r\n\r\n  const handleLogin = () => {\r\n    dispatchAuthReducer(ACTIONS.login_success())\r\n  }\r\n\r\n  const handleLogout = () => {\r\n    dispatchAuthReducer(ACTIONS.login_failure())\r\n  }\r\n\r\n  const handleAddProfile = (profile) => {\r\n    dispatchAuthReducer(ACTIONS.add_profile(profile))\r\n  }\r\n\r\n  const handleRemoveProfile = () => {\r\n    dispatchAuthReducer(ACTIONS.remove_profile())\r\n  }\r\n\r\n\r\n\r\n  /*\r\n    Form Reducer\r\n  */\r\n\r\n  const [stateFormReducer, dispatchFormReducer] = useReducer(FormReducer.FormReducer,\r\n    FormReducer.initialState)\r\n\r\n  const handleFormChange = (event) => {\r\n    dispatchFormReducer(ACTIONS.user_input_change(event.target.value))\r\n  };\r\n\r\n  const handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    event.persist();\r\n    dispatchFormReducer(ACTIONS.user_input_submit(event.target.useContext.value))\r\n  };\r\n\r\n  //Handle authentication from callback\r\n  const handleAuthentication = (props) => {\r\n    if (props.location.hash) {\r\n      // auth.handleAuth()\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        //Reducer1\r\n        // stateProp1: stateReducer1.stateprop1,\r\n        // stateProp2: stateReducer1.stateprop2,\r\n        // dispatchContextTrue: () => handleDispatchTrue(),\r\n        // dispatchContextFalse: () => handleDispatchFalse(),\r\n\r\n        //Form Reducer\r\n        useContextChangeState: stateFormReducer.user_textChange,\r\n        useContextSubmitState: stateFormReducer.user_textSubmit,\r\n        useContextSubmit: (event) => handleFormSubmit(event),\r\n        useContextChange: (event) => handleFormChange(event),\r\n\r\n        //Auth Reducer\r\n        authState: stateAuthReducer.is_authenticated,\r\n        profileState: stateAuthReducer.profile,\r\n        handleUserLogin: () => handleLogin(),\r\n        handleUserLogout: () => handleLogout(),\r\n        handleUserAddProfile: (profile) => handleAddProfile(profile),\r\n        handleUserRemoveProfile: () => handleRemoveProfile(),\r\n\r\n        //Handle auth\r\n        handleAuth: (props) => handleAuthentication(props),\r\n        // authObj: auth\r\n      }}>\r\n      <Routes />\r\n\r\n    </Context.Provider>\r\n\r\n  )\r\n}\r\n\r\n\r\nexport default ContextState;","import * as ACTION_TYPES from './action_types'\r\n\r\n// const SUCCESS = {\r\n//   type: ACTION_TYPES.SUCCESS\r\n// }\r\n\r\n// const FAILURE = {\r\n//   type: ACTION_TYPES.FAILURE\r\n// }\r\n\r\n\r\nconst success = () => {\r\n  return {\r\n    type: ACTION_TYPES.SUCCESS\r\n  }\r\n}\r\n\r\nconst failure = () => {\r\n  return {\r\n    type: ACTION_TYPES.FAILURE\r\n  }\r\n}\r\n\r\n\r\n\r\nconst login_success = () => {\r\n  return {\r\n    type: ACTION_TYPES.LOGIN_SUCCESS\r\n  }\r\n}\r\n\r\nconst login_failure = () => {\r\n  return {\r\n    type: ACTION_TYPES.LOGIN_FAILURE\r\n  }\r\n}\r\n\r\n\r\nconst add_profile = (profile) => {\r\n  return {\r\n    type: ACTION_TYPES.ADD_PROFILE,\r\n    payload: profile\r\n  }\r\n}\r\n\r\nconst remove_profile = () => {\r\n  return {\r\n    type: ACTION_TYPES.REMOVE_PROFILE\r\n  }\r\n}\r\n\r\nconst user_input_change = (text) => {\r\n  return {\r\n    type: ACTION_TYPES.USER_INPUT_CHANGE,\r\n    payload: text\r\n  }\r\n}\r\n\r\nconst user_input_submit = (text) => {\r\n  return {\r\n    type: ACTION_TYPES.USER_INPUT_SUBMIT,\r\n    payload: text\r\n  }\r\n}\r\n\r\nexport { success, failure, login_success, login_failure, add_profile, remove_profile, user_input_change, user_input_submit }","import React from 'react';\nimport './App.css';\nimport ContextState from './context_state_config';\n\nfunction App() {\n  return (\n    <ContextState>\n    </ContextState >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}